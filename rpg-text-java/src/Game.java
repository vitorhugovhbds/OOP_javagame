// Importa√ß√£o da classe Scanner para entrada de dados do usu√°rio
import java.util.Scanner;

// Classe principal que controla o fluxo geral do jogo e gerencia o estado do RPG
public class Game {
    // Atributos da classe que representam o estado do jogo
    private Personagem jogador;      // Refer√™ncia para o personagem do jogador
    private boolean jogoRodando;     // Flag que controla se o jogo est√° em execu√ß√£o
    private int areaAtual;           // Controla o progresso do jogador pelas √°reas (1-3)
    
    // M√©todo principal que inicia e controla o loop do jogo
    public void iniciar() {
        jogoRodando = true; // Inicializa a flag para manter o jogo rodando
        System.out.println("üéÆ RPG DE TEXTO - A JORNADA DA PEDRA DA ETERNIDADE üéÆ");
        
        // Loop principal do jogo - executa enquanto jogoRodando for true
        while (jogoRodando) {
            GameMenu.mostrarMenuPrincipal(); // Exibe o menu principal
            int opcao = GameMenu.lerOpcao(1, 4); // L√™ op√ß√£o validada entre 1-4
            
            // Switch para processar a op√ß√£o escolhida no menu
            switch (opcao) {
                case 1:
                    iniciarNovoJogo(); // Inicia uma nova partida
                    break;
                case 2:
                    System.out.println("\n‚öîÔ∏è Instru√ß√µes: Derrote inimigos, colete itens, complete a miss√£o!");
                    GameMenu.pausa(); // Pausa para leitura
                    break;
                case 3:
                    System.out.println("\nDesenvolvedores: Henrique Gambin e Vitor Hugo"); // Cr√©ditos
                    GameMenu.pausa(); // Pausa para leitura
                    break;
                case 4:
                    jogoRodando = false; // Encerra o jogo
                    System.out.println("üëã At√© logo!");
                    break;
            }
        }
    }
    
    // M√©todo que inicia uma nova jornada do jogador
    private void iniciarNovoJogo() {
        criarPersonagem(); // Cria o personagem do jogador
        GameStory.mostrarIntroducao(jogador.getNome()); // Mostra a introdu√ß√£o da hist√≥ria
        GameMenu.pausa(); // Pausa para leitura
        
        // Sistema de progress√£o por √°reas - controla o fluxo linear do jogo
        areaAtual = 1; // Come√ßa na √°rea 1 (Floresta)
        // Loop que avan√ßa pelas √°reas enquanto o jogo est√° ativo e jogador vivo
        while (jogoRodando && jogador.estaVivo() && areaAtual <= 3) {
            switch (areaAtual) {
                case 1:
                    if (explorarFloresta()) areaAtual++; // Avan√ßa se completou floresta
                    break;
                case 2:
                    if (explorarCaverna()) areaAtual++; // Avan√ßa se completou caverna
                    break;
                case 3:
                    if (enfrentarChefeFinal()) areaAtual++; // Avan√ßa se derrotou chefe
                    break;
            }
            GameMenu.pausa(); // Pausa entre √°reas
        }
        
        finalizarJogo(); // Processa o final do jogo (vit√≥ria ou derrota)
    }
    
    // M√©todo para cria√ß√£o do personagem do jogador
    private void criarPersonagem() {
        GameMenu.mostrarMenuCriacaoPersonagem(); // Mostra menu de classes
        int classe = GameMenu.lerOpcao(1, 3); // L√™ escolha da classe (1-3)
        String nome = GameMenu.lerNomePersonagem(); // L√™ nome do personagem
        
        // Switch para instanciar a classe escolhida
        switch (classe) {
            case 1:
                jogador = new Guerreiro(nome); // Cria Guerreiro
                break;
            case 2:
                jogador = new Mago(nome); // Cria Mago
                break;
            case 3:
                jogador = new Arqueiro(nome); // Cria Arqueiro
                break;
        }
        
        // Itens iniciais que todo personagem recebe
        jogador.getInventario().adicionarItem(new Item("Po√ß√£o de Cura", "Cura 20 HP", "cura", 3));
        jogador.getInventario().adicionarItem(new Item("Erva Curativa", "Cura 15 HP", "cura", 2));
        
        System.out.println("\n‚úÖ Personagem criado: " + jogador); // Confirma cria√ß√£o
        GameMenu.pausa(); // Pausa para leitura
    }
    
    // M√©todo que controla a explora√ß√£o da primeira √°rea (Floresta Misteriosa)
    private boolean explorarFloresta() {
        Scanner scanner = new Scanner(System.in); // Scanner local para entrada
        
        // Loop de explora√ß√£o - continua enquanto jogador estiver vivo
        while (jogador.estaVivo()) {
            GameStory.mostrarFlorestaMisteriosa(); // Descri√ß√£o ambiental
            System.out.println("\nüå≤ O que voc√™ faz na floresta?");
            System.out.println("1. üîç Explorar");       // Busca eventos aleat√≥rios
            System.out.println("2. üéí Ver Invent√°rio"); // Gerencia itens
            System.out.println("3. ‚ù§Ô∏è  Ver Status");    // Mostra atributos
            System.out.println("4. üö∂ Seguir para Caverna"); // Avan√ßa para pr√≥xima √°rea
            System.out.print("Escolha: ");
            
            int escolha = scanner.nextInt(); // L√™ escolha do jogador
            
            // Processa a escolha do jogador
            switch (escolha) {
                case 1:
                    if (!eventoFloresta()) return false; // Evento pode terminar jogo
                    break;
                case 2:
                    gerenciarInventario(); // Abre menu de invent√°rio
                    break;
                case 3:
                    mostrarStatus(); // Exibe status do personagem
                    break;
                case 4:
                    System.out.println("\n‚≠ê Voc√™ encontra a entrada da Caverna Sombria...");
                    return true; // Retorna true para avan√ßar de √°rea
                default:
                    System.out.println("‚ùå Op√ß√£o inv√°lida!"); // Tratamento de erro
            }
        }
        return false; // Retorna false se jogador morreu
    }
    
    // M√©todo que gera eventos aleat√≥rios na floresta
    private boolean eventoFloresta() {
        int evento = Dice.roll(3); // Rola D3 para evento aleat√≥rio (1-3)
        
        switch (evento) {
            case 1: // Encontro com lobo - evento de combate
                GameStory.encontroComLobo(); // Narrativa do encontro
                Inimigo lobo = new Inimigo("Lobo da Floresta", "Animal", 
                    GameConstants.LOBO_HP, GameConstants.LOBO_ATK, GameConstants.LOBO_DEF, 1);
                
                int resultadoBatalha = CombatSystem.batalhar(jogador, lobo); // Inicia combate
                
                if (resultadoBatalha == 2) { // Fugiu
                    System.out.println("üèÉ Voc√™ fugiu do lobo...");
                    return true; // Continua explora√ß√£o
                } else if (resultadoBatalha == 0 || !jogador.estaVivo()) { // Derrota
                    return false; // Termina jogo
                }
                // Vit√≥ria - continua explora√ß√£o normalmente
                break;
                
            case 2: // Encontro com ba√∫ - evento de recompensa
                GameStory.encontrouBau(); // Narrativa do encontro
                System.out.println("üéÅ Voc√™ encontrou uma po√ß√£o forte!");
                jogador.getInventario().adicionarItem(new Item("Po√ß√£o Forte", "Cura 30 HP", "cura", 1));
                break;
                
            case 3: // Encontro com po√ß√£o - evento de recompensa
                GameStory.encontrouPocao(); // Narrativa do encontro
                System.out.println("üß™ Voc√™ encontrou ervas medicinais!");
                jogador.getInventario().adicionarItem(new Item("Erva Curativa", "Cura 15 HP", "cura", 2));
                break;
        }
        return true; // Continua explora√ß√£o
    }
    
    // M√©todo que controla a segunda √°rea (Caverna Sombria)
    private boolean explorarCaverna() {
        GameStory.mostrarCavernaSombria(); // Descri√ß√£o ambiental
        
        // Chefe da caverna - Goblin (combate obrigat√≥rio)
        GameStory.encontroComGoblin(); // Narrativa do encontro
        Inimigo goblin = new Inimigo("Goblin Guardi√£o", "Goblin",
            GameConstants.GOBLIN_HP, GameConstants.GOBLIN_ATK, GameConstants.GOBLIN_DEF, 2);
        
        // Goblin tem itens especiais para saque
        goblin.getInventario().adicionarItem(new Item("Po√ß√£o Forte", "Cura 30 HP", "cura", 1));
        goblin.getInventario().adicionarItem(new Item("Adaga Afiada", "Aumenta ataque", "ataque", 1));
        
        int resultadoBatalha = CombatSystem.batalhar(jogador, goblin); // Combate com goblin
        
        if (resultadoBatalha == 2) { // Fugiu
            System.out.println("üèÉ Voc√™ fugiu da caverna...");
            return false; // N√£o avan√ßa de √°rea
        } else if (resultadoBatalha == 0 || !jogador.estaVivo()) { // Derrota
            return false; // Termina jogo
        } else if (resultadoBatalha == 1) { // Vit√≥ria - S√ì AQUI SAQUEIA
            // Saquear o goblin - APENAS SE VENCEU
            System.out.println("üíé Saqueando o Goblin...");
            System.out.println("  ‚Üí Po√ß√£o Forte");
            System.out.println("  ‚Üí Adaga Afiada");
            jogador.getInventario().adicionarItem(new Item("Po√ß√£o Forte", "Cura 30 HP", "cura", 1));
            jogador.getInventario().adicionarItem(new Item("Adaga Afiada", "Aumenta ataque", "ataque", 1));
        }
        
        System.out.println("\nüó∫Ô∏è Voc√™ encontra um mapa que leva ao Castelo Antigo...");
        return true; // Avan√ßa para pr√≥xima √°rea
    }
    
    // M√©todo que controla a √°rea final e chefe final
    private boolean enfrentarChefeFinal() {
        Scanner scanner = new Scanner(System.in); // Scanner local para escolha
        GameStory.mostrarCasteloAntigo(); // Descri√ß√£o ambiental
        
        // Escolha de caminho - ramifica√ß√£o narrativa
        System.out.println("üîÆ Duas portas se apresentam:");
        System.out.println("1. Porta das Runas M√≠sticas");   // Caminho pac√≠fico
        System.out.println("2. Porta das Marcas de Batalha"); // Caminho de combate
        System.out.print("Qual porta escolhe? (1-2): ");
        
        int escolha = scanner.nextInt(); // L√™ escolha do caminho
        
        if (escolha == 1) {
            GameStory.portaMistica(); // Narrativa do caminho m√≠stico
            System.out.println("üìö Voc√™ encontra pergaminhos m√°gicos!");
            jogador.getInventario().adicionarItem(new Item("Pergaminho M√°gico", "Aumenta ataque", "ataque", 2));
        } else {
            GameStory.portaBatalha(); // Narrativa do caminho de batalha
            System.out.println("‚öîÔ∏è Uma armadura animada ataca!");
            Inimigo armadura = new Inimigo("Armadura Animada", "Constructo", 80, 15, 12, 3);
            
            int resultadoBatalha = CombatSystem.batalhar(jogador, armadura); // Combate opcional
            
            if (resultadoBatalha == 2) { // Fugiu
                System.out.println("üèÉ Voc√™ fugiu do castelo...");
                return false; // Termina jogo
            } else if (resultadoBatalha == 0 || !jogador.estaVivo()) { // Derrota
                return false; // Termina jogo
            }
            // Se vit√≥ria, continua para chefe final
        }
        
        // CHEFE FINAL - combate decisivo
        GameStory.mostrarSalaoDoTrono(); // Narrativa do sal√£o final
        GameStory.encontroComGuardiao(); // Narrativa do chefe final
        Inimigo guardiao = new Inimigo("Guardi√£o Ancestral", "Esp√≠rito",
            GameConstants.GUARDIAO_HP, GameConstants.GUARDIAO_ATK, GameConstants.GUARDIAO_DEF, 5);
        
        guardiao.getInventario().adicionarItem(new Item("Pedra da Eternidade", "Artefato lend√°rio", "poder", 1));
        
        System.out.println("\n‚ö†Ô∏è  BATALHA FINAL!");
        int resultadoFinal = CombatSystem.batalhar(jogador, guardiao); // Combate final
        
        if (resultadoFinal == 1 && jogador.estaVivo()) { // Vit√≥ria
            GameStory.finalVitoria(); // Narrativa de vit√≥ria
            return true; // Completa o jogo
        } else {
            return false; // Derrota - termina jogo
        }
    }
    
    // M√âTODO CORRIGIDO - INVENT√ÅRIO FUNCIONAL
    private void gerenciarInventario() {
        Scanner scanner = new Scanner(System.in); // Scanner local para menu
        
        // Loop do menu de invent√°rio
        while (true) {
            System.out.println("\nüéí === GERENCIAR INVENT√ÅRIO ===");
            System.out.println("Itens totais: " + jogador.getInventario().getQuantidadeTotal());
            System.out.println("1. üìã Listar Itens");   // Mostra todos os itens
            System.out.println("2. üß™ Usar Item");      // Usa um item espec√≠fico
            System.out.println("3. ‚Ü©Ô∏è  Voltar");         // Sai do menu
            System.out.print("Escolha: ");
            
            int escolha = scanner.nextInt();
            scanner.nextLine(); // Limpa buffer
            
            switch (escolha) {
                case 1:
                    System.out.println("\nüìã === ITENS NO INVENT√ÅRIO ===");
                    jogador.getInventario().listarItens(); // Lista itens ordenados
                    break;
                case 2:
                    usarItemInventario(); // Chama m√©todo de uso de item
                    break;
                case 3:
                    return; // Sai do m√©todo e volta para explora√ß√£o
                default:
                    System.out.println("‚ùå Op√ß√£o inv√°lida!"); // Tratamento de erro
            }
        }
    }
    
    // M√âTODO CORRIGIDO - AGORA VAI FUNCIONAR!
    private void usarItemInventario() {
        if (!jogador.getInventario().temItens()) {
            System.out.println("üì≠ Seu invent√°rio est√° vazio!");
            return; // Sai se n√£o h√° itens
        }
        
        Scanner scanner = new Scanner(System.in);
        
        // Primeiro listamos os itens
        System.out.println("\nüß™ === USAR ITEM ===");
        System.out.println("Seus itens:");
        jogador.getInventario().listarItens(); // Mostra itens dispon√≠veis
        
        System.out.print("üìù Digite o NOME do item que deseja usar: ");
        String nomeItem = scanner.nextLine(); // L√™ nome do item (case sensitive)
        
        Item item = jogador.getInventario().getItem(nomeItem); // Busca item pelo nome
        if (item != null) {
            System.out.println("\nüéØ Usando " + item.getNome() + "...");
            item.usar(jogador); // Aplica efeito do item no personagem
            
            // Atualizar o invent√°rio ap√≥s usar
            if (item.getQuantidade() <= 0) {
                jogador.getInventario().removerItem(item.getNome()); // Remove se acabou
                System.out.println("‚úÖ Item usado e removido do invent√°rio!");
            } else {
                System.out.println("‚úÖ Item usado! Restam: " + item.getQuantidade());
            }
        } else {
            System.out.println("‚ùå Item n√£o encontrado! Verifique o nome digitado."); // Item n√£o existe
        }
    }
    
    // M√©todo para exibir status detalhado do personagem
    private void mostrarStatus() {
        System.out.println("\nüìä === STATUS ===");
        System.out.println(jogador); // toString do personagem
        System.out.println("Ataque: " + jogador.calcularAtaque() + " (Base: " + jogador.getAtaque() + ")");
        System.out.println("Defesa: " + jogador.calcularDefesa() + " (Base: " + jogador.getDefesa() + ")");
        System.out.println("Itens no invent√°rio: " + jogador.getInventario().getQuantidadeTotal());
        System.out.println("=================");
    }
    
    // M√©todo que processa o final do jogo (vit√≥ria ou derrota)
    private void finalizarJogo() {
        if (jogador.estaVivo() && areaAtual > 3) {
            GameStory.finalVitoria(); // Narrativa de vit√≥ria
            System.out.println("\nüèÜ PARAB√âNS! VOC√ä COMPLETOU A JORNADA!");
        } else {
            GameStory.finalDerrota(); // Narrativa de derrota
            System.out.println("\nüíÄ Fim do jogo...");
        }
        jogoRodando = false; // Encerra o jogo
    }
}

/*
COMENT√ÅRIO FINAL - GAME.JAVA:

A classe Game √© o cora√ß√£o do sistema de RPG, atuando como o controlador principal
que orquestra todo o fluxo do jogo, desde o menu inicial at√© o desfecho final.

ARQUITETURA E FLUXO DO JOGO:

1. GERENCIAMENTO DE ESTADO:
   - jogador: Mant√©m refer√™ncia ao personagem do jogador durante toda a sess√£o
   - jogoRodando: Flag que controla o loop principal do jogo
   - areaAtual: Sistema de progress√£o linear atrav√©s das 3 √°reas do jogo

2. PADR√ÉO DE CONTROLE CENTRALIZADO:
   - Todas as decis√µes de alto n√≠vel passam por esta classe
   - Coordena intera√ß√£o entre subsistemas (combate, invent√°rio, hist√≥ria)
   - Mant√©m consist√™ncia do estado global do jogo

3. SISTEMA DE √ÅREAS PROGRESSIVAS:
   - Floresta Misteriosa (√Årea 1): Tutorial com eventos aleat√≥rios
   - Caverna Sombria (√Årea 2): Combate obrigat√≥rio com primeiro chefe
   - Castelo Antigo (√Årea 3): √Årea final com ramifica√ß√£o narrativa e chefe final

MEC√ÇNICAS DE JOGO IMPLEMENTADAS:

1. CRIA√á√ÉO DE PERSONAGEM:
   - Sele√ß√£o entre 3 classes com atributos distintos
   - Nome personaliz√°vel pelo jogador
   - Kit inicial balanceado de itens de cura

2. SISTEMA DE EXPLORA√á√ÉO:
   - Menu contextual por √°rea com op√ß√µes espec√≠ficas
   - Eventos aleat√≥rios baseados em rolagem de dados
   - Progress√£o n√£o-linear dentro de cada √°rea

3. RAMIFICA√á√ÉO NARRATIVA:
   - Escolha no castelo entre caminho pac√≠fico ou de combate
   - Recompensas diferentes baseadas na escolha
   - Impacto na prepara√ß√£o para o chefe final

4. GERENCIAMENTO DE RECURSOS:
   - Sistema de invent√°rio integrado em todas as √°reas
   - Uso estrat√©gico de itens durante explora√ß√£o
   - Controle de quantidades e remo√ß√£o autom√°tica

PADR√ïES DE PROJETO APLICADOS:

1. CONTROLLER PATTERN:
   - Game age como controlador entre modelo (Personagem, Itens) e vista (Console)
   - Centraliza a l√≥gica de aplica√ß√£o

2. STATE PATTERN IMPL√çCITO:
   - Transi√ß√µes entre menus, explora√ß√£o e combate
   - Controle de fluxo baseado em estado atual

3. FACADE PATTERN:
   - Simplifica interface com subsistemas complexos
   - M√©todos de alto n√≠vel escondem complexidade

4. TEMPLATE METHOD:
   - Estrutura comum para diferentes √°reas (explorarX(), eventoX())
   - Customiza√ß√£o atrav√©s de polimorfismo

TRATAMENTO DE ERROS E VALIDA√á√ÉO:

- Valida√ß√£o de entradas num√©ricas em todos os menus
- Verifica√ß√£o de estado do jogador (vivo/morto) em loops cr√≠ticos
- Mensagens de erro informativas para entradas inv√°lidas
- Recupera√ß√£o graciosa de exce√ß√µes

EXPANSIBILIDADE E MANUTEN√á√ÉO:

- Estrutura modular facilita adi√ß√£o de novas √°reas
- Sistema de eventos aleat√≥rios permite f√°cil expans√£o de conte√∫do
- Separa√ß√£o clara entre l√≥gica de jogo e conte√∫do narrativo
- Uso de constantes para balanceamento facilita ajustes

BALANCEAMENTO E PROGRESS√ÉO:

- Dificuldade crescente atrav√©s das √°reas
- Recompensas proporcionais aos desafios
- Kit inicial suficiente para aprendizado
- Chefe final desafiador mas poss√≠vel com estrat√©gia

Esta implementa√ß√£o demonstra um sistema de jogo completo e coeso, oferecendo
uma experi√™ncia de RPG textual envolvente com come√ßo, meio e fim claros,
enquanto mant√©m c√≥digo organizado e expans√≠vel para futuras melhorias.
*/