// Importa√ß√µes necess√°rias para a classe CombatSystem
import java.util.List; // Para usar List na manipula√ß√£o de itens do invent√°rio
import java.util.Scanner; // Para entrada de dados do usu√°rio durante o combate

// Classe respons√°vel por gerenciar todo o sistema de combate do RPG
public class CombatSystem {
    // Scanner est√°tico para entrada de dados, compartilhado por todos os m√©todos
    private static final Scanner scanner = new Scanner(System.in);
    
    // M√©todo principal que controla toda a batalha entre jogador e inimigo
    public static int batalhar(Personagem jogador, Inimigo inimigo) {
        // Cabe√ßalho da batalha com emojis para melhor experi√™ncia visual
        System.out.println("\n‚öîÔ∏è === BATALHA CONTRA " + inimigo.getNome().toUpperCase() + " ===");
        
        // Contador de turnos para acompanhar o progresso da batalha
        int turno = 1;
        // Loop principal da batalha - continua enquanto ambos estiverem vivos
        while (jogador.estaVivo() && inimigo.estaVivo()) {
            // Exibe informa√ß√µes do turno atual e status dos combatentes
            System.out.println("\n--- Turno " + turno + " ---");
            System.out.println("‚ù§Ô∏è  " + jogador.getNome() + ": " + jogador.getPontosVida() + "/" + jogador.getPontosVidaMax() + " HP");
            System.out.println("üíÄ " + inimigo.getNome() + ": " + inimigo.getPontosVida() + " HP");
            
            // Turno do jogador - agora retorna int
            int resultadoTurno = turnoJogador(jogador, inimigo);
            
            // Verifica se o jogador fugiu com sucesso
            if (resultadoTurno == 2) { // Fugiu com sucesso
                return 2; // Retorna c√≥digo de fuga bem-sucedida
            }
            // Verifica se o jogador usou item e continua batalha
            if (resultadoTurno == 3) { // Usou item e continua batalha
                // Continua a batalha normalmente - n√£o faz nada especial
            }
            // Verifica se o inimigo morreu durante o turno do jogador
            if (!inimigo.estaVivo()) break; // Sai do loop se inimigo morreu
            
            // Turno do inimigo - s√≥ executa se o jogador ainda estiver vivo
            if (jogador.estaVivo()) {
                turnoInimigo(jogador, inimigo);
            }
            
            // Incrementa o contador de turnos para o pr√≥ximo ciclo
            turno++;
        }
        
        // Ap√≥s o t√©rmino da batalha, verifica e retorna o resultado
        return verificarResultado(jogador, inimigo);
    }
    
    // M√©todo que controla o turno do jogador durante a batalha
    private static int turnoJogador(Personagem jogador, Inimigo inimigo) {
        // Apresenta as op√ß√µes de a√ß√£o para o jogador
        System.out.println("\nüéØ SUA VEZ:");
        System.out.println("1. ‚öîÔ∏è  Atacar");
        System.out.println("2. üí® Fugir");
        System.out.println("3. üéí Invent√°rio");
        System.out.print("Escolha uma a√ß√£o: ");
        
        // L√™ a escolha do jogador
        int escolha = scanner.nextInt();
        scanner.nextLine(); // Limpa o buffer do scanner
        
        // Switch para processar a escolha do jogador
        switch (escolha) {
            case 1:
                // Executa ataque do jogador
                atacarJogador(jogador, inimigo);
                return 1; // Continuar batalha
            case 2:
                // Tenta fugir da batalha
                if (tentarFugir()) {
                    return 2; // Fugiu com sucesso
                } else {
                    return 1; // Falhou em fugir, continua batalha
                }
            case 3:
                // Abre o invent√°rio para usar itens
                return usarItemBatalha(jogador, inimigo); // Usar item do invent√°rio
            default:
                // Op√ß√£o inv√°lida - ataca automaticamente
                System.out.println("‚ùå Op√ß√£o inv√°lida! Atacando automaticamente.");
                atacarJogador(jogador, inimigo);
                return 1;
        }
    }
    
    // M√©todo para usar itens do invent√°rio durante a batalha
    private static int usarItemBatalha(Personagem jogador, Inimigo inimigo) {
        // Verifica se o invent√°rio tem itens dispon√≠veis
        if (!jogador.getInventario().temItens()) {
            System.out.println("üì≠ Seu invent√°rio est√° vazio!");
            return 1; // Volta para batalha
        }
        
        // Exibe interface do invent√°rio em batalha
        System.out.println("\nüéí === INVENT√ÅRIO NA BATALHA ===");
        jogador.getInventario().listarItens(); // Lista todos os itens dispon√≠veis
        System.out.println("0. ‚Ü©Ô∏è  Voltar para batalha");
        System.out.print("Escolha o N√öMERO do item para usar: ");
        
        // Bloco try-catch para tratamento de entradas inv√°lidas
        try {
            int escolha = scanner.nextInt();
            scanner.nextLine(); // Limpa o buffer
            
            // Verifica se o jogador escolheu voltar
            if (escolha == 0) {
                System.out.println("‚Ü©Ô∏è  Voltando para batalha...");
                return 1; // Retorna para batalha
            }
            
            // Buscar o item pelo √≠ndice
            List<Item> itens = jogador.getInventario().getItens();
            // Verifica se a escolha est√° dentro dos limites v√°lidos
            if (escolha > 0 && escolha <= itens.size()) {
                Item itemSelecionado = itens.get(escolha - 1); // Ajusta √≠ndice para base 0
                
                System.out.println("\nüéØ Usando " + itemSelecionado.getNome() + " durante a batalha...");
                
                // VERIFICAR SE √â ITEM DE CURA - MANTIDO O C√ìDIGO ORIGINAL
                if (itemSelecionado.getEfeito().equalsIgnoreCase("cura")) {
                    // Armazena valores para c√°lculo de cura
                    int vidaAntes = jogador.getPontosVida();
                    int vidaMax = jogador.getPontosVidaMax();
                    
                    // Calcular cura real sem ultrapassar o m√°ximo - CORRE√á√ÉO APLICADA AQUI
                    int curaPotencial = 0;
                    // Determina valor de cura baseado no nome do item
                    if (itemSelecionado.getNome().contains("Po√ß√£o Forte")) {
                        curaPotencial = GameConstants.POCAO_FORTE_CURA;
                    } else if (itemSelecionado.getNome().contains("Po√ß√£o")) {
                        curaPotencial = GameConstants.POCAO_CURA;
                    } else {
                        curaPotencial = GameConstants.ERVA_CURA;
                    }
                    
                    // CORRE√á√ÉO: Usar o m√©todo curar que j√° controla o m√°ximo automaticamente
                    jogador.curar(curaPotencial);
                    
                    // Calcula quanto de vida foi realmente recuperada
                    int vidaRecuperada = jogador.getPontosVida() - vidaAntes;
                    
                    // Verifica se houve cura efetiva
                    if (vidaRecuperada > 0) {
                        System.out.println("‚ú® " + jogador.getNome() + " recuperou " + vidaRecuperada + " HP!");
                        System.out.println("‚ù§Ô∏è  HP atual: " + jogador.getPontosVida() + "/" + vidaMax);
                        
                        // Remover uma unidade do item do invent√°rio
                        jogador.getInventario().removerItem(itemSelecionado.getNome());
                    } else {
                        // Mensagem quando o personagem j√° est√° com vida cheia
                        System.out.println("üí§ " + jogador.getNome() + " j√° est√° com a vida cheia!");
                        System.out.println("‚ù§Ô∏è  HP: " + jogador.getPontosVida() + "/" + vidaMax);
                    }
                    
                    return 3; // Item usado, continua batalha
                } else {
                    // Para outros tipos de item (ataque, defesa, etc.)
                    itemSelecionado.usar(jogador);
                    System.out.println("üîÆ Efeito aplicado: " + itemSelecionado.getEfeito());
                    
                    // Remover item se acabou (quantidade chegou a zero)
                    if (itemSelecionado.getQuantidade() <= 0) {
                        jogador.getInventario().removerItem(itemSelecionado.getNome());
                    }
                    
                    return 3; // Item usado, continua batalha
                }
            } else {
                // N√∫mero de item inv√°lido - recurs√£o para tentar novamente
                System.out.println("‚ùå N√∫mero de item inv√°lido!");
                return usarItemBatalha(jogador, inimigo); // Tenta novamente
            }
        } catch (Exception e) {
            // Tratamento de exce√ß√£o para entradas n√£o num√©ricas
            System.out.println("‚ùå Entrada inv√°lida!");
            scanner.nextLine(); // Limpa o buffer com erro
            return usarItemBatalha(jogador, inimigo); // Tenta novamente
        }
    }
    
    // M√©todo que executa o ataque do jogador contra o inimigo
    private static void atacarJogador(Personagem jogador, Inimigo inimigo) {
        // Rola o dado D20 para o ataque
        int dadoJogador = Dice.rollD20();
        // Calcula o valor total do ataque (ataque base + b√¥nus + dado)
        int ataqueJogador = jogador.calcularAtaque() + dadoJogador;
        // Obt√©m a defesa do inimigo
        int defesaInimigo = inimigo.calcularDefesa();
        
        System.out.println("üé≤ Voc√™ rolou " + dadoJogador + " no D20!");
        
        // Verifica se o ataque supera a defesa
        if (ataqueJogador > defesaInimigo) {
            // Calcula o dano baseado na diferen√ßa entre ataque e defesa
            int dano = ataqueJogador - defesaInimigo;
            System.out.println("‚úÖ Acertou! Causou " + dano + " de dano!");
            inimigo.receberDano(dano); // Aplica o dano ao inimigo
        } else {
            System.out.println("‚ùå O inimigo se defendeu do seu ataque!");
        }
    }
    
    // M√©todo que executa o turno do inimigo
    private static void turnoInimigo(Personagem jogador, Inimigo inimigo) {
        System.out.println("\nüíÄ VEZ DO " + inimigo.getNome().toUpperCase());
        
        // Rola o dado D20 para o ataque do inimigo
        int dadoInimigo = Dice.rollD20();
        // Calcula o ataque total do inimigo
        int ataqueInimigo = inimigo.calcularAtaque() + dadoInimigo;
        // Obt√©m a defesa do jogador
        int defesaJogador = jogador.calcularDefesa();
        
        System.out.println("üé≤ " + inimigo.getNome() + " rolou " + dadoInimigo + " no D20!");
        
        // Verifica se o ataque do inimigo supera a defesa do jogador
        if (ataqueInimigo > defesaJogador) {
            // Calcula o dano sofrido pelo jogador
            int dano = ataqueInimigo - defesaJogador;
            System.out.println("‚úÖ " + inimigo.getNome() + " acertou! Causou " + dano + " de dano!");
            jogador.receberDano(dano); // Aplica o dano ao jogador
        } else {
            System.out.println("‚ùå Voc√™ se defendeu do ataque inimigo!");
        }
    }
    
    // M√©todo para tentar fugir da batalha
    private static boolean tentarFugir() {
        System.out.println("üí® Tentando fugir...");
        // Rola D10 para determinar sucesso da fuga
        int rolagem = Dice.rollD10();
        
        // Chance de 50% de fuga bem-sucedida (6-10 no D10)
        if (rolagem > 5) {
            System.out.println("‚úÖ Fuga bem-sucedida!");
            return true;
        } else {
            System.out.println("‚ùå Falha na fuga!");
            return false;
        }
    }
    
    // M√©todo para verificar e exibir o resultado final da batalha
    private static int verificarResultado(Personagem jogador, Inimigo inimigo) {
        if (jogador.estaVivo()) {
            System.out.println("\nüéâ VIT√ìRIA! Voc√™ derrotou " + inimigo.getNome() + "!");
            return 1; // Vit√≥ria
        } else {
            System.out.println("\nüíÄ DERROTA... " + inimigo.getNome() + " foi demais para voc√™.");
            return 0; // Derrota
        }
    }
}

/*
COMENT√ÅRIO FINAL - COMBATSYSTEM.JAVA:

A classe CombatSystem √© o n√∫cleo do sistema de combate do RPG, implementando um sistema
baseado em turnos com rolagem de dados, similar aos sistemas de RPG de mesa tradicionais.

ARQUITETURA DO SISTEMA DE COMBATE:

1. SISTEMA BASEADO EM TURNOS:
   - Loop principal controlado por while que alterna entre turnos do jogador e inimigo
   - Contador de turnos para acompanhamento do progresso da batalha
   - Verifica√ß√µes de estado de vida em cada itera√ß√£o

2. MEC√ÇNICA DE ATAQUE E DEFESA:
   - Uso de D20 para determinar sucesso dos ataques
   - C√°lculo: AtaqueTotal = AtaqueBase + B√¥nusClasse + RolagemD20
   - Dano = AtaqueTotal - DefesaTotal (se positivo)
   - Sistema favorece estrat√©gia sobre sorte pura

3. SISTEMA DE INVENT√ÅRIO EM BATALHA:
   - Integra√ß√£o completa com sistema de itens durante combate
   - Interface num√©rica para sele√ß√£o de itens
   - Tratamento especial para itens de cura com controle de vida m√°xima
   - Recurs√£o para tratamento de entradas inv√°lidas

4. MEC√ÇNICA DE FUGA:
   - Chance baseada em rolagem de D10 (50% de sucesso)
   - Implementa risco/recompensa estrat√©gico
   - Retorna c√≥digo espec√≠fico para controle de fluxo do jogo

5. TRATAMENTO DE ERROS E VALIDA√á√ÉO:
   - Try-catch para entradas n√£o num√©ricas
   - Valida√ß√£o de √≠ndices de itens
   - Recupera√ß√£o graciosa de erros de entrada

C√ìDIGOS DE RETORNO DO SISTEMA:
- 0: Derrota (jogador morreu)
- 1: Vit√≥ria (inimigo derrotado)
- 2: Fuga bem-sucedida
- 3: Item usado (continua batalha)

PADR√ïES DE PROJETO APLICADOS:
- M√©todos est√°ticos para funcionalidade pura (stateless)
- Separa√ß√£o de responsabilidades em m√©todos especializados
- Recurs√£o para repeti√ß√£o de entrada inv√°lida
- Encapsulamento atrav√©s de m√©todos privados

BALANCEAMENTO E ESTRAT√âGIA:
- D20 proporciona variabilidade controlada (5-25 de varia√ß√£o)
- B√¥nus de classe garantem diferencia√ß√£o entre arqu√©tipos
- Sistema de cura preventivo evita waste de recursos
- Chance de fuga balanceada para n√£o ser abusada

Esta implementa√ß√£o demonstra um sistema de combate robusto e expans√≠vel, preparado
para adi√ß√£o de novas mec√¢nicas como habilidades especiais, efeitos de status e
sistemas mais complexos de dano e defesa.
*/