// Importa√ß√£o da classe Objects para m√©todos utilit√°rios como hashCode e equals
import java.util.Objects;

// Classe abstrata Personagem que define a estrutura base para todos os personagens do RPG
public abstract class Personagem implements Cloneable {
    // Atributos protegidos - acess√≠veis pelas subclasses mas n√£o publicamente
    protected String nome;           // Nome do personagem
    protected int pontosVida;        // Vida atual do personagem
    protected int pontosVidaMax;     // Vida m√°xima do personagem (CORRE√á√ÉO ADICIONADA)
    protected int ataque;            // Valor base de ataque
    protected int defesa;            // Valor base de defesa
    protected int nivel;             // N√≠vel do personagem
    protected Inventario inventario; // Sistema de invent√°rio do personagem

    // Construtor principal para criar novos personagens
    public Personagem(String nome, int pontosVida, int ataque, int defesa, int nivel) {
        this.nome = nome;
        this.pontosVida = pontosVida;
        this.pontosVidaMax = pontosVida; // Vida m√°xima igual √† vida inicial - CORRE√á√ÉO IMPORTANTE
        this.ataque = ataque;
        this.defesa = defesa;
        this.nivel = nivel;
        this.inventario = new Inventario(); // Cada personagem tem seu pr√≥prio invent√°rio
    }

    // Construtor de c√≥pia para criar c√≥pias profundas de personagens
    public Personagem(Personagem outro) {
        this.nome = outro.nome;
        this.pontosVida = outro.pontosVida;
        this.pontosVidaMax = outro.pontosVidaMax; // Copia vida m√°xima tamb√©m
        this.ataque = outro.ataque;
        this.defesa = outro.defesa;
        this.nivel = outro.nivel;
        // Cria nova inst√¢ncia de invent√°rio usando construtor de c√≥pia
        this.inventario = new Inventario(outro.inventario);
    }

    // M√©todos abstratos - devem ser implementados pelas subclasses
    public abstract int calcularAtaque();  // Calcula ataque total com b√¥nus de classe
    public abstract int calcularDefesa();  // Calcula defesa total com b√¥nus de classe
    public abstract String getClasse();    // Retorna nome da classe especializada

    // M√©todos concretos - implementa√ß√£o comum para todas as subclasses

    // Verifica se o personagem est√° vivo
    public boolean estaVivo() {
        return pontosVida > 0;  // Retorna true se vida maior que zero
    }

    // Aplica dano ao personagem
    public void receberDano(int dano) {
        pontosVida -= dano;  // Subtrai o dano da vida atual
        // Garante que a vida n√£o fique negativa
        if (pontosVida < 0) pontosVida = 0;
    }

    // CORRE√á√ÉO APLICADA: M√©todo para curar o personagem com controle de vida m√°xima
    public void curar(int cura) {
        int vidaAntes = pontosVida;  // Armazena vida antes da cura para c√°lculo
        pontosVida += cura;          // Aplica a cura
        
        // CORRE√á√ÉO: Garantir que n√£o ultrapasse a vida m√°xima da classe
        if (pontosVida > pontosVidaMax) {
            pontosVida = pontosVidaMax;  // Limita ao m√°ximo
        }
        
        // Calcula quanto de vida foi realmente recuperado
        int vidaRecuperada = pontosVida - vidaAntes;
        
        // Feedback visual baseado no resultado da cura
        if (vidaRecuperada > 0) {
            System.out.println("‚ú® " + nome + " recuperou " + vidaRecuperada + " HP!");
        } else {
            System.out.println("üí§ " + nome + " j√° est√° com a vida cheia!");
        }
    }

    // Getters para acesso controlado aos atributos

    public String getNome() { return nome; }
    public int getPontosVida() { return pontosVida; }
    public int getPontosVidaMax() { return pontosVidaMax; } // NOVO GETTER - CORRE√á√ÉO IMPORTANTE
    public int getAtaque() { return ataque; }
    public int getDefesa() { return defesa; }
    public int getNivel() { return nivel; }
    public Inventario getInventario() { return inventario; }

    // Representa√ß√£o textual do personagem para exibi√ß√£o
    @Override
    public String toString() {
        return nome + " (" + getClasse() + " Nv." + nivel + ") - HP: " + pontosVida + "/" + pontosVidaMax + ", ATK: " + ataque + ", DEF: " + defesa;
    }

    // M√©todo equals para comparar personagens baseado em atributos essenciais
    @Override
    public boolean equals(Object obj) {
        // Otimiza√ß√£o para mesma refer√™ncia
        if (this == obj) return true;
        // Verifica√ß√£o de null e compatibilidade de classe
        if (obj == null || getClass() != obj.getClass()) return false;
        // Cast seguro ap√≥s verifica√ß√£o
        Personagem that = (Personagem) obj;
        // Compara√ß√£o baseada em atributos num√©ricos e nome
        return pontosVida == that.pontosVida &&
               ataque == that.ataque &&
               defesa == that.defesa &&
               nivel == that.nivel &&
               Objects.equals(nome, that.nome);
    }

    // HashCode consistente com equals para uso em cole√ß√µes
    @Override
    public int hashCode() {
        // Gera hash baseado nos mesmos campos usados no equals
        return Objects.hash(nome, pontosVida, ataque, defesa, nivel);
    }

    // Implementa√ß√£o do padr√£o Prototype para clonagem de personagens
    @Override
    public Personagem clone() {
        try {
            // Clone superficial da inst√¢ncia
            Personagem clone = (Personagem) super.clone();
            // Clona o invent√°rio para garantir independ√™ncia (c√≥pia profunda)
            clone.inventario = this.inventario.clone();
            return clone;  // Retorna a c√≥pia independente
        } catch (CloneNotSupportedException e) {
            // Teoricamente imposs√≠vel pois implementamos Cloneable
            throw new AssertionError();
        }
    }
}

/*
COMENT√ÅRIO FINAL - PERSONAGEM.JAVA:

A classe Personagem √© a classe abstrata fundamental do sistema de RPG, atuando
como a base de toda a hierarquia de personagens e implementando o padr√£o
Template Method para definir uma estrutura comum enquanto permite especializa√ß√µes.

ARQUITETURA E DESIGN:

1. CLASSE ABSTRATA BASE:
   - Define interface comum para todos os personagens
   - Implementa funcionalidades compartilhadas
   - Delega especializa√ß√µes para subclasses atrav√©s de m√©todos abstratos

2. PADR√ÉO TEMPLATE METHOD:
   - Estrutura comum definida na classe base
   - M√©todos abstratos for√ßam implementa√ß√£o espec√≠fica nas subclasses
   - Combina√ß√£o de m√©todos concretos e abstratos para flexibilidade

ATRIBUTOS E ESTADO:

1. ATRIBUTOS PROTEGIDOS:
   - Acess√≠veis por subclasses mas n√£o publicamente
   - Balance entre encapsulamento e extensibilidade
   - pontosVidaMax adicionado como CORRE√á√ÉO CR√çTICA

2. SISTEMA DE VIDA (CORRE√á√ÉO APLICADA):
   - Antes: Sistema incompleto sem controle de vida m√°xima
   - Depois: pontosVidaMax permite cura controlada e balanceamento
   - Impacto: Resolve problema de vida infinita com po√ß√µes

M√âTODOS PRINCIPAIS:

1. M√âTODOS ABSTRATOS (Template Method):
   - calcularAtaque(): Permite b√¥nus espec√≠ficos por classe
   - calcularDefesa(): Permite especializa√ß√µes defensivas
   - getClasse(): Identifica√ß√£o polim√≥rfica do tipo

2. M√âTODOS CONCRETOS (Funcionalidade Compartilhada):
   - estaVivo(): L√≥gica comum de estado
   - receberDano(): Mec√¢nica universal de dano
   - curar(): CORRE√á√ÉO - agora controla vida m√°xima

3. M√âTODO curar() - CORRE√á√ÉO DETALHADA:
   - Problema anterior: Vida podia ultrapassar m√°ximo com m√∫ltiplas curas
   - Solu√ß√£o: pontosVidaMax + verifica√ß√£o expl√≠cita + feedback visual
   - vidaRecuperada calculada para mostrar cura real (n√£o potencial)

PADR√ïES DE PROJETO IMPLEMENTADOS:

1. TEMPLATE METHOD PATTERN:
   - Estrutura fixa com pontos de customiza√ß√£o
   - Reuso m√°ximo de c√≥digo comum
   - For√ßa consist√™ncia entre subclasses

2. PROTOTYPE PATTERN:
   - clone() permite cria√ß√£o de c√≥pias para save points
   - C√≥pia profunda do invent√°rio mant√©m independ√™ncia
   - Essencial para sistema de salvamento

3. COMPOSITION OVER INHERITANCE:
   - Inventario como componente separado
   - Flexibilidade para modificar comportamento de invent√°rio

4. DEFENSIVE PROGRAMMING:
   - Verifica√ß√£o de null em equals()
   - Controle de limites em receberDano() e curar()
   - C√≥pia defensiva no construtor de c√≥pia

SISTEMA DE INVENT√ÅRIO:

1. COMPOSI√á√ÉO:
   - Cada personagem tem seu pr√≥prio invent√°rio
   - Separa√ß√£o clara de responsabilidades
   - Permite diferentes estrat√©gias de invent√°rio por classe

2. C√ìPIA PROFUNDA:
   - Invent√°rio clonado independentemente
   - Evita compartilhamento de estado entre c√≥pias
   - Essencial para sistema de saque e save points

CORRE√á√ïES CR√çTICAS APLICADAS:

1. PONTOSVIDAMAX:
   - Adicionado para controle expl√≠cito de vida m√°xima
   - Inicializado igual a pontosVida inicial
   - Getter adicionado para acesso controlado

2. M√âTODO CURAR():
   - Reescrevido completamente com controle de m√°ximo
   - Feedback visual informativo
   - C√°lculo de cura real vs cura potencial

3. CONSTRUTOR DE C√ìPIA:
   - Agora copia pontosVidaMax tamb√©m
   - Garante consist√™ncia entre original e c√≥pia

BENEF√çCIOS DO DESIGN:

1. EXTENSIBILIDADE:
   - F√°cil cria√ß√£o de novas classes de personagem
   - Preparado para sistema de ra√ßas/arqu√©tipos adicionais
   - M√©todos abstratos garantem contrato consistente

2. MANUTEN√á√ÉO:
   - L√≥gica comum centralizada na classe base
   - Corre√ß√µes aplicam-se a todas as subclasses automaticamente
   - Encapsulamento protege estado interno

3. CONSIST√äNCIA:
   - Todas as subclasses seguem mesma interface
   - Comportamento polim√≥rfico previs√≠vel
   - Sistema de tipos forte e expl√≠cito

4. PREPARADO PARA EXPANS√ïES:
   - Sistema de level up futuro
   - Equipamentos e atributos derivados
   - Status effects e buffs/debuffs

IMPACTO NO SISTEMA:

A corre√ß√£o do sistema de vida (pontosVidaMax + curar()) resolve um problema
fundamental de balanceamento que afetava toda a economia de itens do jogo.
Agora:

- Po√ß√µes n√£o podem mais causar overflow de vida
- Estrat√©gia de cura torna-se mais t√°tica
- Balanceamento entre classes √© preservado
- Feedback ao jogador √© mais informativo

Esta implementa√ß√£o de Personagem demonstra um design maduro e bem estruturado,
servindo como base s√≥lida para todo o sistema de RPG enquanto mant√©m flexibilidade
para crescimento futuro e ader√™ncia a princ√≠pios s√≥lidos de orienta√ß√£o a objetos.
*/